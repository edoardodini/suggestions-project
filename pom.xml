<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.2</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.examples</groupId>
	<artifactId>suggestions-project</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>suggestions-project</name>
	<description>Project for creating a suggestions web app</description>

	<properties>
		<java.version>1.8</java.version>

		<!-- For SonarQube -->
		<sonar.coverage.jacoco.xmlReportPaths>
			${project.reporting.outputDirectory}/jacoco/jacoco.xml
		</sonar.coverage.jacoco.xmlReportPaths>
		<!-- Also collects integration tests -->
		<sonar.junit.reportPaths>
			${project.build.directory}/surefire-reports,
			${project.build.directory}/failsafe-reports
		</sonar.junit.reportPaths>
		<!-- Also scans HTML files -->
		<sonar.sources>
			pom.xml,
			${project.build.sourceDirectory},
			${basedir}/src/main/resources
		</sonar.sources>
		<!-- Manually specify sonar.tests since, if we run sonar:sonar in a separate 
			build, SonarQube can only detect the standard test source folder and not 
			the additional ones configured by build-helper-maven-plugin (src/it/java 
			and src/e2e/java). This way, SonarQube will keep track also of integration 
			and e2e tests. -->
		<sonar.tests>
			${project.build.testSourceDirectory},
			${basedir}/src/it/java,
			${basedir}/src/e2e/java
		</sonar.tests>
		<!-- Exclude non covered files -->
		<sonar.coverage.exclusions>
			**/*Application.*,
			**/model/*
		</sonar.coverage.exclusions>
		<!-- For each rule to be ignore, add another eXX and two corresponding 
			properties with eXX in the name as below -->
		<sonar.issue.ignore.multicriteria>e11, e12, e13, e14</sonar.issue.ignore.multicriteria>
		<!-- "Tests should include assertions" disabled on some classes like *ApplicationTests 
			which just checks that the Spring application can start, without any assertion -->
		<sonar.issue.ignore.multicriteria.e11.ruleKey>
			java:S2699
		</sonar.issue.ignore.multicriteria.e11.ruleKey>
		<sonar.issue.ignore.multicriteria.e11.resourceKey>
			**/*ApplicationTests.java
		</sonar.issue.ignore.multicriteria.e11.resourceKey>
		<!-- "Similar tests should be grouped in a single Parameterized test" disabled 
			on "SuggestionWebControllerTest" which contains three similar tests that 
			are more readable without being parameterized -->
		<sonar.issue.ignore.multicriteria.e12.ruleKey>
			java:S5976
		</sonar.issue.ignore.multicriteria.e12.ruleKey>
		<sonar.issue.ignore.multicriteria.e12.resourceKey>
			**/SuggestionWebControllerTest.java
		</sonar.issue.ignore.multicriteria.e12.resourceKey>
		<!-- "Similar tests should be grouped in a single Parameterized test" disabled 
			on "SuggestionWebControllerHtmlUnitTest" which contains three similar tests 
			that are more readable without being parameterized -->
		<sonar.issue.ignore.multicriteria.e13.ruleKey>
			java:S5976
		</sonar.issue.ignore.multicriteria.e13.ruleKey>
		<sonar.issue.ignore.multicriteria.e13.resourceKey>
			**/SuggestionWebControllerHtmlUnitTest.java
		</sonar.issue.ignore.multicriteria.e13.resourceKey>
		<!-- "Persistent entities should not be used as arguments of "@RequestMapping" 
			methods" disabled on "SuggestionWebController" which contains a post method 
			that use an entity as a parameter but in this case it is not possible from 
			a specially crafted user input, to change the content of unexpected fields 
			into the database. -->
		<sonar.issue.ignore.multicriteria.e14.ruleKey>
			java:S4684
		</sonar.issue.ignore.multicriteria.e14.ruleKey>
		<sonar.issue.ignore.multicriteria.e14.resourceKey>
			**/SuggestionWebController.java
		</sonar.issue.ignore.multicriteria.e14.resourceKey>

		<skip.unit-tests>false</skip.unit-tests>
		<skip.integration-tests>false</skip.integration-tests>

		<spring.security.user.name>admin</spring.security.user.name>
		<spring.security.user.password>admin</spring.security.user.password>
		<spring.security.user.roles>admin</spring.security.user.roles>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Dependency for testing the rest controller -->
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>spring-mock-mvc</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Dependency for automatic restarting and LiveReload -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Database dependency "section", MySql is the main database, H2 for 
			unit testing -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.199</version><!--$NO-MVN-MAN-VER$ -->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>

		<!-- Dependency for Spring Boot Testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing 
			JUnit 4 has been removed from spring-boot-starter-test in new versions of 
			Spring Boot, so we have to add the Jupiter vintage explicitly. hamcrest-core 
			is excluded in favor of org.hamcrest:hamcrest that is part of spring-boot-starter-test -->
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.hamcrest</groupId>
					<artifactId>hamcrest-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Dependency for performing html unit testing -->
		<dependency>
			<groupId>net.sourceforge.htmlunit</groupId>
			<artifactId>htmlunit</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Dependency for using Selenium during tests -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>htmlunit-driver</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-support</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.github.bonigarcia</groupId>
			<artifactId>webdrivermanager</artifactId>
			<version>3.5.0</version>
			<scope>test</scope>
		</dependency>

		<!-- Dependency for Spring Boot Security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<!-- Dependency for Spring Security Testing -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<!-- Plugin for add test sources -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>process-resources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
								<source>src/e2e/java</source>
							</sources>
						</configuration>
					</execution>
					<!-- Reserving a port for running a MySql database -->
					<execution>
						<id>reserve-network-port</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>reserve-network-port</goal>
						</goals>
						<configuration>
							<portNames>
								<portName>mysql.port</portName>
							</portNames>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Plugin for excuting Unit Tests -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>${skip.unit-tests}</skipTests>
					<includes>
						<include>**/*Test.java</include>
					</includes>
				</configuration>
			</plugin>
			<!-- Plugin for using docker -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.37.0</version>
				<extensions>true</extensions>
				<configuration>
					<images>
						<image>
							<alias>database</alias>
							<name>mysql:5.7</name>
							<run>
								<wait>
									<log>MySQL init process done. Ready for start up.</log>
									<time>100000</time>
								</wait>
								<env>
									<MYSQL_ROOT_PASSWORD>abc123</MYSQL_ROOT_PASSWORD>
									<MYSQL_DATABASE>testdb</MYSQL_DATABASE>
									<MYSQL_USER>user</MYSQL_USER>
									<MYSQL_PASSWORD>password</MYSQL_PASSWORD>
								</env>
								<ports>
									<port>${mysql.port}:3306</port>
								</ports>
							</run>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>docker:start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>docker:stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Plugin for performing Integration Tests -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<configuration>
							<skipTests>${skip.integration-tests}</skipTests>
							<includes>
								<include>**/*ApplicationTests.java</include>
								<include>**/*IT.java</include>
							</includes>
							<systemPropertyVariables>
								<spring.datasource.url>jdbc:mysql://localhost:${mysql.port}/testdb</spring.datasource.url>
								<spring.datasource.username>user</spring.datasource.username>
								<spring.datasource.password>password</spring.datasource.password>
							</systemPropertyVariables>
						</configuration>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!-- Plugin for mutation testing -->
				<plugin>
					<groupId>org.pitest</groupId>
					<artifactId>pitest-maven</artifactId>
					<version>1.4.10</version>
					<configuration>
						<targetClasses>
							<param>com.examples.suggestions_project.services.*</param>
						</targetClasses>
						<excludedTestClasses>
							<param>main</param>
						</excludedTestClasses>
						<mutators>
							<mutator>DEFAULTS</mutator>
						</mutators>
						<mutationThreshold>80</mutationThreshold>
						<timeoutFactor>2</timeoutFactor>
						<timeoutConstant>13000</timeoutConstant>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>mutationCoverage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<!-- Plugin for performing Code Coverage -->
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>0.8.6</version>
					<configuration>
						<excludes>
							<exclude>**/*Application.*</exclude>
							<exclude>**/model/*</exclude>
							<!-- The following is just to avoid the instrumentation error (when 
								running tests that use HtmlUnit) due to the HtmlUnit class StyleAttributes$Definition 
								(method too large) -->
							<exclude>**/htmlunit/*</exclude>
						</excludes>
					</configuration>
					<executions>
						<execution>
							<goals>
								<!-- binds by default to the phase "initialize" -->
								<goal>prepare-agent</goal>
								<!-- binds by default to the phase "verify" -->
								<goal>report</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- You must run coveralls:report explicitly -->
				<plugin>
					<!-- Plugin for using Coveralls -->
					<groupId>org.eluder.coveralls</groupId>
					<artifactId>coveralls-maven-plugin</artifactId>
					<version>4.3.0</version>
					<dependencies>
						<!-- This is required when using JDK 9 or higher since javax.xml.bind 
							has been removed from the JDK -->
						<dependency>
							<groupId>javax.xml.bind</groupId>
							<artifactId>jaxb-api</artifactId>
							<version>2.3.1</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<!-- Plugin for executing SonarQube analysis -->
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>3.8.0.2131</version>
				</plugin>
				<!-- The Spring Boot Maven Plugin provides Spring Boot support in Maven, 
					letting you package executable jar or war archives and run an application 
					“in-place”. -->
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>jacoco</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<configuration>
							<!-- Don't use the default property so that we'll do code coverage 
								only for surefire tests (not for failsafe) -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!-- Code coverage for surefire tests only -->
							<argLine>${surefireArgLine}</argLine>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- profile for executing E2E tests -->
		<profile>
			<id>e2e-tests</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<skip.unit-tests>true</skip.unit-tests>
				<skip.integration-tests>true</skip.integration-tests>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<!-- Reserving a port for running Tomcat -->
							<execution>
								<id>reserve-tomcat-port</id>
								<phase>process-resources</phase>
								<goals>
									<goal>reserve-network-port</goal>
								</goals>
								<configuration>
									<portNames>
										<portName>tomcat.http.port</portName>
									</portNames>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>pre-integration-test</id>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<arguments>
										<argument>--server.port=${tomcat.http.port}</argument>
									</arguments>
									<systemPropertyVariables>
										<spring.datasource.url>jdbc:mysql://localhost:${mysql.port}/testdb</spring.datasource.url>
										<spring.datasource.username>user</spring.datasource.username>
										<spring.security.user.name>${spring.security.user.name}</spring.security.user.name>
										<spring.security.user.password>${spring.security.user.password}</spring.security.user.password>
										<spring.security.user.roles>${spring.security.user.roles}</spring.security.user.roles>
									</systemPropertyVariables>
								</configuration>
							</execution>
							<execution>
								<id>post-integration-test</id>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<execution>
								<id>e2e-tests</id>
								<configuration>
									<includes>
										<include>**/*E2E.java</include>
									</includes>
								</configuration>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<systemPropertyVariables>
								<server.port>${tomcat.http.port}</server.port>
								<spring.security.user.name>${spring.security.user.name}</spring.security.user.name>
								<spring.security.user.password>${spring.security.user.password}</spring.security.user.password>
								<spring.security.user.roles>${spring.security.user.roles}</spring.security.user.roles>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
